source /home/avar/.screenrc
source /home/aearnfjord/.screenrc

sessionname dev-gitlab-gdk

# Installation
screen -t gl:i:0 bash
stuff "cd ~/g.gl/gdk/gitlab-development-kit^M"
# See https://gitlab.com/gitlab-org/gitlab-development-kit/-/blob/master/doc/advanced.md#debian
# See https://gitlab.com/gitlab-org/gitlab-development-kit/blob/master/doc/index.md#install-and-set-up-gdk
stuff "# New installation^M"
stuff "# time make bootstrap^M"
stuff "# cd ..^M"
stuff "# git clone git@gitlab.com:avar/avar-gitlab.config.git^M"
stuff "# cd gitlab-development-kit^M"
stuff "# ln -s ../avar-gitlab.config/gdk.yml .^M"
stuff "# cd gitaly^M"
# https://gitlab.com/gitlab-org/gitaly/-/blob/master/doc/beginners_guide.md#setup

# The webpack process would bitch about inotify limits, set:
#    $ grep -v -e ^# -e ^$ /etc/sysctl.d/80-avar-inotify.conf
#    fs.inotify.max_user_watches=1048576
#    fs.inotify.max_user_instances=131072
#    fs.inotify.max_queued_events=2097152

# Then do 'make gitaly setup', see
# https://gitlab.com/gitlab-org/gitaly/-/blob/master/doc/beginners_guide.md#editing-code-and-seeing-what-happens

# Also needed:
# - make postgresql/data
# - make redis/redis.conf
# - make jaeger-setup

# Main
screen -t gl:0 bash
stuff "cd ~/g.gl/gdk/gitlab-development-kit^M"

screen -t gl:1 bash
stuff "cd ~/g.gl/gdk/gitlab-development-kit^M"

# Gdk
screen -t gl:gdk:0 bash
stuff "cd ~/g.gl/gdk/gitlab-development-kit^M"
stuff "gdk help^M"
stuff "# gdk update^M"
stuff "# gdk reconfigure^M"

screen -t gl:gdk:1 bash
stuff "cd ~/g.gl/gdk/gitlab-development-kit^M"

screen -t gl:gdk:l:0 bash
stuff "cd ~/g.gl/gdk/gitlab-development-kit^M"
stuff "gdk tail^M"

screen -t gl:gdk:l:1 bash
stuff "cd ~/g.gl/gdk/gitlab-development-kit^M"
stuff "# gdk tail^M"

# Gitaly - Main
screen -t gl:aly:0 bash
stuff "cd ~/g.gl/gdk/gitlab-development-kit/gitaly^M"

screen -t gl:aly:1 bash
stuff "cd ~/g.gl/gdk/gitlab-development-kit/gitaly^M"

screen -t gl:aly:2 bash
stuff "cd ~/g.gl/gdk/gitlab-development-kit/gitaly^M"

## Gitaly - Build
screen -t gl:aly:build:0 bash
stuff "cd ~/g.gl/gdk/gitlab-development-kit/gitaly^M"
stuff "# make build^M"

screen -t gl:aly:build:1 bash
stuff "cd ~/g.gl/gdk/gitlab-development-kit/gitaly^M"

## Gitaly - Test
screen -t gl:aly:test:all:run bash
stuff "cd ~/g.gl/gdk/gitlab-development-kit/gitaly^M"
stuff "# make test^M"
stuff "# time GOMAXPROCS=8 nice -n 19 make test 2>&1 | tee _build/test.out^M"
stuff "# grep '\^--- FAIL' _build/test.out^M"

screen -t gl:aly:test:all:out bash
stuff "cd ~/g.gl/gdk/gitlab-development-kit/gitaly^M"
stuff "# GOMAXPROCS=8 make test 2>&1 | tee _build/test.out^M"
stuff "tail -F _build/test.out | grep -C20 '\^--- FAIL'^M"

screen -t gl:aly:test:1 bash
stuff "cd ~/g.gl/gdk/gitlab-development-kit/gitaly^M"
stuff "# go test -v ./internal/git/ -run Test.*Remote^M"
stuff "# PATH=/home/avar/g/git:\$PATH go test -v ./internal/git/ -run Test.*Remote^M"
# -count=1 is a cache buster, e.g. if the Ruby code changes Go won't
# -actually re-run a test!. See
# -https://stackoverflow.com/questions/48882691/force-retesting-or-disable-test-caching
stuff "# go test -v ./internal/gitaly/service/operations/ -run 'Tag|Branch' -count=1^M"

# GitLab - Main
screen -t gl:lab:0 bash
stuff "cd ~/g.gl/gdk/gitlab-development-kit/gitlab^M"

screen -t gl:lab:1 bash
stuff "cd ~/g.gl/gdk/gitlab-development-kit/gitlab^M"

screen -t gl:lab:2 bash
stuff "cd ~/g.gl/gdk/gitlab-development-kit/gitlab^M"

screen -t gl:lab:3 bash
stuff "cd ~/g.gl/gdk/gitlab-development-kit/gitlab^M"

# Repo - gitlab-test.git
screen -t gl:lab:repo:t:0 bash
stuff "cd ~/^g.gl/gitlab-org/gitlab-test^M"

select 0
