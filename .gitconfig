[user]
	name = Ævar Arnfjörð Bjarmason
	email = avarab@gmail.com
[github]
	login = avar
[include]
	path = ~/.gitconfig.d/github-token
[includeIf "gitdir:~/g/perl/"]
	path = ~/.gitconfig.d/user-perl
[includeIf "gitdir:*/git_tree/"]
	# Matches both the /usr/local path & ~/git_tree, but
	# */git_tree/ is a hack around
	# <CACBZZX5d25UyGbb6=kPmzk_5-X0GMptN0kX_--aBADsDy-9kWw@mail.gmail.com>
	path = ~/.gitconfig.d/user-booking
[includeIf "gitdir:~/git_tree.local/"]
	path = ~/.gitconfig.d/user-booking
[includeIf "gitdir:/etc/puppet/"]
	path = ~/.gitconfig.d/user-booking
[color]
	ui = auto

;; Don't be so invasive about coloring ^M when I'm editing files that
;; are supposed to have \r\n.
[color "diff"]
	whitespace = 0

[alias]
	;; Lazyness
	st = status --short
	ci = commit
	co = checkout
	sm = submodule
	chrp = cherry-pick
	f = fetch
	pf = !git pfetch

	;; Parellel fetch
	pfetch = !parallel 'git fetch {}' ::: $(git remote)

	;; Log
	lo = log --decorate --abbrev-commit --stat
	tree = log --graph --pretty=format:'%C(yellow)%h%Creset -%C(bold red)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

	;; Submodules
	sm-init = !git submodule update --init
	; Try to update all the submodules, doing some guesswork to get branch names
	sm-pull-all = !git submodule foreach 'git checkout $(NAME=$name git sm-mainbranch) && git pull'
	; Manually specify a branch from the main config, or try to guess it
	sm-mainbranch = !git config --file ../.gitmodules submodule.$NAME.branch || git describe --all --always | sed 's!^heads/!!'

	;; Diff
	di     = diff -M -p --stat
	diw    = diff -M -p --stat -w
	diww   = diff -M -p --stat -w --word-diff=color
	diwwd  = diff -M -p --stat -w --word-diff=color --word-diff-regex=.
	dis    = diff -M -p --stat --staged
	disw   = diff -M -p --stat --staged -w
	disww  = diff -M -p --stat --staged -w --word-diff=color
	diswwd = diff -M -p --stat --staged -w --word-diff=color --word-diff-regex=.
	;; Show
	s      = show -M -p --stat
	sw     = show -M -p --stat -w
	sww    = show -M -p --stat -w --word-diff=color
	swwd   = show -M -p --stat -w --word-diff=color --word-diff-regex=.

	;; Pull/push
	pu = pull --stat

	;; Handy tools
	review = "!f() { for rev in $(git rev-list --reverse $@); do LESS='--IGNORE-CASE --LONG-PROMPT --QUIET --chop-long-lines --RAW-CONTROL-CHARS' git show --stat -p -M $rev; done; }; f"

        ;; Git doesn't have a one-shot command to copy a branch & its
        ;; config to a new location.
        cp-branch = "!f() { git checkout -b $2 $1 && for line in $(git config --list --file .git/config | grep \"^branch\\.$1\"); do key=$(echo $line | cut -d= -f1); newkey=$(echo $key | sed \"s!$1!$2!\"); value=$(echo $line | cut -d= -f2); git config $newkey $value; done; }; f"

	;; Working on git.git
	git-commit-summary = show -s --date=short --pretty='format:%h (\"%s\", %ad)'

	;; Like push but harder
	thrust = "!f() { until (sleep 0.5 && git push); do git pull --rebase; done; }; f"
[push]
	default = upstream
[pull]
	rebase = true
[sendemail]
	smtpserver = smtp.gmail.com
	smtpEncryption = ssl
	smtpuser = avarab@gmail.com
	confirm = always
[rebase]
	autosquash = true
	;; Show stat output on rebase to show what changed
	stat = true
[http]
	sslVerify = false
[grep]
	lineNumber = true
	patternType = perl
[log]
	;; Show tags and other references in "git log"
	decorate = short
	;; Abbreviate commits by default. I.e. don't show a full SHA1
	abbrevCommit = true
[merge]
	;; Create non-ff merge commits. Pretty much the only use I have for 'git merge'
	ff = true
	;; Have "git merge" do what "git pull" would have done
	defaultToUpstream = true
[annex]
	backends = SHA256E SHA256
[help]
	autocorrect = 5
[core]
	untrackedCache = true
	splitIndex = true
[diff]
	indentHeuristic = true
