;; User
[user]
	name = Ævar Arnfjörð Bjarmason
	email = avarab@gmail.com
[github]
	login = avar
[include]
	path = ~/.gitconfig.d/github-token
	path = ~/g/git-hyperfine/git-hyperfine-gitconfig.cfg
[includeIf "gitdir:~/g/perl/"]
	path = ~/.gitconfig.d/user-perl

;; Core
[core]
	untrackedCache = true
	splitIndex = false

	;; Increase from 100ms to 10s, I'm not running a server, in
	;; the rare cases where this does happen due to gc or whatever
	;; let's give it plenty of time to recover.
	filesRefLockTimeout = 10000
[init]
	;; Enough with the spammy "This default branch name is subject
	;; to change." advice already!
	defaultBranch = master

;; Core -- UI
[help]
	autocorrect = 0
[color]
	ui = auto
	;; Enable the color.man patch, not covered under
	;; color.ui=auto. See
	;; https://lore.kernel.org/git/patch-1.1-a950ef49e28-20210621T083254Z-avarab@gmail.com/
	man = true

;; Core commands -- status
[status]
	showStash = true

;; Core commands -- network
[push]
	default = upstream
[fetch]
	output = compact
[pull]
	rebase = true
[sendemail]
	smtpserver = smtp.gmail.com
	smtpEncryption = ssl
	smtpuser = avarab@gmail.com
	confirm = always
[include]
	path = ~/.gitconfig.d/smtp-pass

;; Core commands -- diff
[diff]
	indentHeuristic = true
	colorMoved = true
	colorMovedWS = allow-indentation-change
[color "diff"]
	;; Don't be so invasive about coloring ^M when I'm editing
	;; files that are supposed to have \r\n.
	whitespace = 0

;; Core commands -- rebase / merge / am
[rebase]
	autosquash = true
	;; Show stat output on rebase to show what changed
	stat = true

	;; when using 'git rebase -i --exec "make test"' I want the
	;; "make test" to run again on "git rebase --continue", the
	;; default behavior is to omit it.
	rescheduleFailedExec = true
[merge]
	;; Have "git merge" do what "git pull" would have done
	defaultToUpstream = true
[rerere]
	enabled = true
	autoUpdate = true
[gc]
	;; Maybe I'll leave that topic branch for a while, but it
	;; conflicts with my other own work, not upstream's
	rerereResolved = "1 year ago"

;; am, format-patch, send-email etc.
[sendemail]
	;; Add an X-Mailer header
	;; (e.g. https://lore.kernel.org/git/20210317182054.5986-19-avarab@gmail.com/raw),
	;; true by default, but...
	xmailer = true
[format] ; format-patch
	;; For more sensible threading, see
	;; https://lore.kernel.org/git/nycvar.QRO.7.76.6.2103191540330.57@tvgsbejvaqbjf.bet/
	thread = shallow
[mailinfo]
	;; For JK etc. patches
	scissors = true

;; Core commands -- checkout / switch etc.
[checkout]
	defaultRemote = origin

;; Core commands -- [creating] objects
[commit]
	;; See https://public-inbox.org/git/20190520182353.22221-1-matheus.bernardino@usp.br/
	verbose = true
[tag]
	sort = version:refname

;; Core commands -- History traversal
[log]
	;; Show tags and other references in "git log"
	decorate = short
	;; Abbreviate commits by default. I.e. don't show a full SHA1
	abbrevCommit = true

;; Core commands -- Misc
[grep]
	patternType = perl

;; Aliases
[alias]
	;; Invoke an arbitrary program with git config. See
	;; https://lore.kernel.org/git/87h7oswepj.fsf@evledraar.gmail.com/
	sh = !sh

	;; Fake a segfault/BUG(). See "BUG_exit_code" in git-compat-util.h
	fake-SEGV = "!f() { echo Fake SEGV; exit 139; }; f"
	fake-BUG  = "!f() { echo Fake BUG;  exit 99;  }; f"

	;; Debugging (see GIT_* vars)
	env = !env --null | perl -n0E 'say if /^GIT/'

	;; Lazyness
	st = status --short
	ci = commit
	co = checkout
	sm = submodule
	chrp = cherry-pick
	sl = shortlog

	;; Parellel fetch
	pfetch = !git fetch --all --jobs=$(nproc)

	;; Submodules
	sm-init = !git submodule update --init
	; Try to update all the submodules, doing some guesswork to get branch names
	sm-pull-all = !git submodule foreach 'git checkout $(NAME=$name git sm-mainbranch) && git pull'
	; Manually specify a branch from the main config, or try to guess it
	sm-mainbranch = !git config --file ../.gitmodules submodule.$NAME.branch || git describe --all --always | sed 's!^heads/!!'

	;; Commit
	cif = commit --fixup
	cis = commit --squash
	ca = commit --amend
	cane = commit --amend --no-edit

	;; Log
	log-psfd = "!f() { PAGER=\"less -p'^commit'\" git log -p --stat --full-diff $@; }; f"
	log-psd = "!f() { PAGER=\"less -p'^commit'\" git log -p --stat $@; }; f"

	hf-args = "!f() { perl -wE \"say q[one: ], \\$_ for @ARGV\" $1; }; f"

	;; Rebase
	r = rebase
	ri = rebase -i
	rc = rebase --continue
	rs = rebase --skip
	ra = rebase --abort

	;; Merge
	ec = !EDITOR=cat git merge --continue

	rix = ri --exec
	rixr = rix 'git reference'

	;; Diff
	di     = diff -M -p --stat
	diw    = !git di -w
	diww   = !git diw --word-diff=color
	diwwd  = !git diww --word-diff-regex=.
	dis    = !git di --staged
	disw   = !git diw --staged
	disww  = !git diww --staged
	diswwd = !git diwwd --staged

	;; Show
	s      = show -M -p --stat
	s0     = !git s -U0
	s1     = !git s -U1
	s2     = !git s -u2
	sw     = !git s -w
	sww    = !git sw --word-diff=color
	swwd   = !git sww --word-diff-regex=.

	;; Handy tools
	review = "!f() { for rev in $(git rev-list --reverse $@); do LESS='--IGNORE-CASE --LONG-PROMPT --QUIET --chop-long-lines --RAW-CONTROL-CHARS' git show --stat -p -M $rev; done; }; f"
	rw = review
	rwu = review @{u}..

	;; Git doesn't have a one-shot command to copy a branch & its
	;; config to a new location.
	cp-branch = "!f() { git branch -c $1 $2 && git checkout $2; }; f"

	;; Working on git.git & other things using "reference"
	reference = !git --no-pager log --pretty=reference -1
	git-commit-summary = !git reference

	;; Like push but harder
	thrust = "!f() { until (sleep 0.5 && git push); do git pull --rebase; done; }; f"

	;; YOLO development, commit with a http://whatthecommit.com commit message
	snap = "!f() { git add -u && git commit -m\"$(what-the-commit-line)\"; }; f"

	;; per-project
	gitaly-make-test-tag-branch = "!f() { TEST_OPTIONS=\"-run \\\"Update|Create|Delete|Tag|Branch\\\"\" TEST_PACKAGES=\"./internal/git/updateref ./internal/gitaly/service/operations\" make test; }; f"

;; 3rd party tools
[annex]
	backends = SHA256E SHA256
